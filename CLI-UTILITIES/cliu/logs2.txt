192.168.1.10 - - [27/Dec/2023:10:15:31 +0000] "GET /api/users HTTP/1.1" 200 214 "http://example.com/start" "Mozilla/5.0..."
192.168.1.11 - - [27/Dec/2023:10:16:45 +0000] "POST /api/users HTTP/1.1" 201 178 "http://example.com/register" "Mozilla/5.0..."
192.168.1.12 - - [27/Dec/2023:10:17:58 +0000] "GET /api/products HTTP/1.1" 404 102 "http://example.com/products" "Mozilla/5.0..."
192.168.1.13 - - [27/Dec/2023:10:19:04 +0000] "GET /home HTTP/1.1" 200 356 "http://example.com/" "Mozilla/5.0..."
192.168.1.14 - - [27/Dec/2023:10:20:20 +0000] "PUT /api/users/123 HTTP/1.1" 200 165 "http://example.com/profile" "Mozilla/5.0..."
192.168.1.15 - - [27/Dec/2023:10:21:36 +0000] "DELETE /api/products/456 HTTP/1.1" 204 - "http://example.com/admin" "Mozilla/5.0..."
192.168.1.16 - - [27/Dec/2023:10:23:51 +0000] "GET /api/orders HTTP/1.1" 500 305 "http://example.com/orders" "Mozilla/5.0..."
192.168.1.17 - - [27/Dec/2023:10:25:05 +0000] "PATCH /api/users/123 HTTP/1.1" 200 179 "http://example.com/update" "Mozilla/5.0..."
192.168.1.18 - - [27/Dec/2023:10:26:17 +0000] "GET /api/cart HTTP/1.1" 200 259 "http://example.com/shopping-cart" "Mozilla/5.0..."
192.168.1.19 - - [27/Dec/2023:10:28:33 +0000] "POST /api/checkout HTTP/1.1" 303 76 "http://example.com/checkout" "Mozilla/5.0..."
The Rust Programming Language
Foreword
Introduction
1. Getting Started
1.1. Installation
1.2. Hello, World!
1.3. Hello, Cargo!
2. Programming a Guessing Game
3. Common Programming Concepts
3.1. Variables and Mutability
3.2. Data Types
3.3. Functions
3.4. Comments
3.5. Control Flow
4. Understanding Ownership
4.1. What is Ownership?
4.2. References and Borrowing
4.3. The Slice Type
5. Using Structs to Structure Related Data
5.1. Defining and Instantiating Structs
5.2. An Example Program Using Structs
5.3. Method Syntax
6. Enums and Pattern Matching
6.1. Defining an Enum
6.2. The match Control Flow Construct
6.3. Concise Control Flow with if let
7. Managing Growing Projects with Packages, Crates, and Modules
7.1. Packages and Crates
7.2. Defining Modules to Control Scope and Privacy
7.3. Paths for Referring to an Item in the Module Tree
7.4. Bringing Paths Into Scope with the use Keyword
7.5. Separating Modules into Different Files
8. Common Collections
8.1. Storing Lists of Values with Vectors
8.2. Storing UTF-8 Encoded Text with Strings
8.3. Storing Keys with Associated Values in Hash Maps
9. Error Handling
9.1. Unrecoverable Errors with panic!
9.2. Recoverable Errors with Result
9.3. To panic! or Not to panic!
10. Generic Types, Traits, and Lifetimes
10.1. Generic Data Types
10.2. Traits: Defining Shared Behavior
10.3. Validating References with Lifetimes
11. Writing Automated Tests
11.1. How to Write Tests
11.2. Controlling How Tests Are Run
11.3. Test Organization
12. An I/O Project: Building a Command Line Program
12.1. Accepting Command Line Arguments
12.2. Reading a File
12.3. Refactoring to Improve Modularity and Error Handling
12.4. Developing the Library’s Functionality with Test Driven Development
12.5. Working with Environment Variables
12.6. Writing Error Messages to Standard Error Instead of Standard Output
13. Functional Language Features: Iterators and Closures
13.1. Closures: Anonymous Functions that Capture Their Environment
13.2. Processing a Series of Items with Iterators
13.3. Improving Our I/O Project
13.4. Comparing Performance: Loops vs. Iterators
14. More about Cargo and Crates.io
14.1. Customizing Builds with Release Profiles
14.2. Publishing a Crate to Crates.io
14.3. Cargo Workspaces
14.4. Installing Binaries from Crates.io with cargo install
14.5. Extending Cargo with Custom Commands
15. Smart Pointers
15.1. Using Box<T> to Point to Data on the Heap
15.2. Treating Smart Pointers Like Regular References with the Deref Trait
15.3. Running Code on Cleanup with the Drop Trait
15.4. Rc<T>, the Reference Counted Smart Pointer
15.5. RefCell<T> and the Interior Mutability Pattern
15.6. Reference Cycles Can Leak Memory
16. Fearless Concurrency
16.1. Using Threads to Run Code Simultaneously
16.2. Using Message Passing to Transfer Data Between Threads
16.3. Shared-State Concurrency
16.4. Extensible Concurrency with the Sync and Send Traits
17. Object Oriented Programming Features of Rust
17.1. Characteristics of Object-Oriented Languages
17.2. Using Trait Objects That Allow for Values of Different Types
17.3. Implementing an Object-Oriented Design Pattern
18. Patterns and Matching
18.1. All the Places Patterns Can Be Used
18.2. Refutability: Whether a Pattern Might Fail to Match
18.3. Pattern Syntax
19. Advanced Features
19.1. Unsafe Rust
19.2. Advanced Traits
19.3. Advanced Types
19.4. Advanced Functions and Closures
19.5. Macros
20. Final Project: Building a Multithreaded Web Server
20.1. Building a Single-Threaded Web Server
20.2. Turning Our Single-Threaded Server into a Multithreaded Server
20.3. Graceful Shutdown and Cleanup
21. Appendix
21.1. A - Keywords
21.2. B - Operators and Symbols
21.3. C - Derivable Traits
21.4. D - Useful Development Tools
21.5. E - Editions
21.6. F - Translations of the Book
21.7. G - How Rust is Made and “Nightly Rust”



The Rust Programming Language
 
Accepting Command Line Arguments
Let’s create a new project with, as always, cargo new. We’ll call our project minigrep to distinguish it from the grep tool that you might already have on your system.

$ cargo new minigrep
     Created binary (application) `minigrep` project
$ cd minigrep
The first task is to make minigrep accept its two command line arguments: the file path and a string to search for. That is, we want to be able to run our program with cargo run, two hyphens to indicate the following arguments are for our program rather than for cargo, a string to search for, and a path to a file to search in, like so:

$ cargo run -- searchstring example-filename.txt
Right now, the program generated by cargo new cannot process arguments we give it. Some existing libraries on crates.io can help with writing a program that accepts command line arguments, but because you’re just learning this concept, let’s implement this capability ourselves.

Reading the Argument Values
To enable minigrep to read the values of command line arguments we pass to it, we’ll need the std::env::args function provided in Rust’s standard library. This function returns an iterator of the command line arguments passed to minigrep. We’ll cover iterators fully in Chapter 13. For now, you only need to know two details about iterators: iterators produce a series of values, and we can call the collect method on an iterator to turn it into a collection, such as a vector, that contains all the elements the iterator produces.

The code in Listing 12-1 allows your minigrep program to read any command line arguments passed to it and then collect the values into a vector.

Filename: src/main.rs

use std::env;

fn main() {
    let args: Vec<String> = env::args().collect();
    dbg!(args);
}
Listing 12-1: Collecting the command line arguments into a vector and printing them

First, we bring the std::env module into scope with a use statement so we can use its args function. Notice that the std::env::args function is nested in two levels of modules. As we discussed in Chapter 7, in cases where the desired function is nested in more than one module, we’ve chosen to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from std::env. It’s also less ambiguous than adding use std::env::args and then calling the function with just args, because args might easily be mistaken for a function that’s defined in the current module.

The args Function and Invalid Unicode
Note that std::env::args will panic if any argument contains invalid Unicode. If your program needs to accept arguments containing invalid Unicode, use std::env::args_os instead. That function returns an iterator that produces OsString values instead of String values. We’ve chosen to use std::env::args here for simplicity, because OsString values differ per platform and are more complex to work with than String values.

On the first line of main, we call env::args, and we immediately use collect to turn the iterator into a vector containing all the values produced by the iterator. We can use the collect function to create many kinds of collections, so we explicitly annotate the type of args to specify that we want a vector of strings. Although we very rarely need to annotate types in Rust, collect is one function you do often need to annotate because Rust isn’t able to infer the kind of collection you want.

Finally, we print the vector using the debug macro. Let’s try running the code first with no arguments and then with two arguments:

$ cargo run
   Compiling minigrep v0.1.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0.61s
     Running `target/debug/minigrep`
[src/main.rs:5] args = [
    "target/debug/minigrep",
]
$ cargo run -- needle haystack
   Compiling minigrep v0.1.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 1.57s
     Running `target/debug/minigrep needle haystack`
[src/main.rs:5] args = [
    "target/debug/minigrep",
    "needle",
    "haystack",
]
Notice that the first value in the vector is "target/debug/minigrep", which is the name of our binary. This matches the behavior of the arguments list in C, letting programs use the name by which they were invoked in their execution. It’s often convenient to have access to the program name in case you want to print it in messages or change behavior of the program based on what command line alias was used to invoke the program. But for the purposes of this chapter, we’ll ignore it and save only the two arguments we need.

Saving the Argument Values in Variables
The program is currently able to access the values specified as command line arguments. Now we need to save the values of the two arguments in variables so we can use the values throughout the rest of the program. We do that in Listing 12-2.

Filename: src/main.rs

use std::env;

fn main() {
    let args: Vec<String> = env::args().collect();

    let query = &args[1];
    let file_path = &args[2];

    println!("Searching for {}", query);
    println!("In file {}", file_path);
}
Listing 12-2: Creating variables to hold the query argument and file path argument

As we saw when we printed the vector, the program’s name takes up the first value in the vector at args[0], so we’re starting arguments at index 1. The first argument minigrep takes is the string we’re searching for, so we put a reference to the first argument in the variable query. The second argument will be the file path, so we put a reference to the second argument in the variable file_path.

We temporarily print the values of these variables to prove that the code is working as we intend. Let’s run this program again with the arguments test and sample.txt:

$ cargo run -- test sample.txt
   Compiling minigrep v0.1.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0.0s
     Running `target/debug/minigrep test sample.txt`
Searching for test
In file sample.txt
Great, the program is working! The values of the arguments we need are being saved into the right variables. Later we’ll add some error handling to deal with certain potential erroneous situations, such as when the user provides no arguments; for now, we’ll ignore that situation and work on adding file-reading capabilities instead.

The Rust Programming Language
Foreword
Introduction
1. Getting Started
1.1. Installation
1.2. Hello, World!
1.3. Hello, Cargo!
2. Programming a Guessing Game
3. Common Programming Concepts
3.1. Variables and Mutability
3.2. Data Types
3.3. Functions
3.4. Comments
3.5. Control Flow
4. Understanding Ownership
4.1. What is Ownership?
4.2. References and Borrowing
4.3. The Slice Type
5. Using Structs to Structure Related Data
5.1. Defining and Instantiating Structs
5.2. An Example Program Using Structs
5.3. Method Syntax
6. Enums and Pattern Matching
6.1. Defining an Enum
6.2. The match Control Flow Construct
6.3. Concise Control Flow with if let
7. Managing Growing Projects with Packages, Crates, and Modules
7.1. Packages and Crates
7.2. Defining Modules to Control Scope and Privacy
7.3. Paths for Referring to an Item in the Module Tree
7.4. Bringing Paths Into Scope with the use Keyword
7.5. Separating Modules into Different Files
8. Common Collections
8.1. Storing Lists of Values with Vectors
8.2. Storing UTF-8 Encoded Text with Strings
8.3. Storing Keys with Associated Values in Hash Maps
9. Error Handling
9.1. Unrecoverable Errors with panic!
9.2. Recoverable Errors with Result
9.3. To panic! or Not to panic!
10. Generic Types, Traits, and Lifetimes
10.1. Generic Data Types
10.2. Traits: Defining Shared Behavior
10.3. Validating References with Lifetimes
11. Writing Automated Tests
11.1. How to Write Tests
11.2. Controlling How Tests Are Run
11.3. Test Organization
12. An I/O Project: Building a Command Line Program
12.1. Accepting Command Line Arguments
12.2. Reading a File
12.3. Refactoring to Improve Modularity and Error Handling
12.4. Developing the Library’s Functionality with Test Driven Development
12.5. Working with Environment Variables
12.6. Writing Error Messages to Standard Error Instead of Standard Output
13. Functional Language Features: Iterators and Closures
13.1. Closures: Anonymous Functions that Capture Their Environment
13.2. Processing a Series of Items with Iterators
13.3. Improving Our I/O Project
13.4. Comparing Performance: Loops vs. Iterators
14. More about Cargo and Crates.io
14.1. Customizing Builds with Release Profiles
14.2. Publishing a Crate to Crates.io
14.3. Cargo Workspaces
14.4. Installing Binaries from Crates.io with cargo install
14.5. Extending Cargo with Custom Commands
15. Smart Pointers
15.1. Using Box<T> to Point to Data on the Heap
15.2. Treating Smart Pointers Like Regular References with the Deref Trait
15.3. Running Code on Cleanup with the Drop Trait
15.4. Rc<T>, the Reference Counted Smart Pointer
15.5. RefCell<T> and the Interior Mutability Pattern
15.6. Reference Cycles Can Leak Memory
16. Fearless Concurrency
16.1. Using Threads to Run Code Simultaneously
16.2. Using Message Passing to Transfer Data Between Threads
16.3. Shared-State Concurrency
16.4. Extensible Concurrency with the Sync and Send Traits
17. Object Oriented Programming Features of Rust
17.1. Characteristics of Object-Oriented Languages
17.2. Using Trait Objects That Allow for Values of Different Types
17.3. Implementing an Object-Oriented Design Pattern
18. Patterns and Matching
18.1. All the Places Patterns Can Be Used
18.2. Refutability: Whether a Pattern Might Fail to Match
18.3. Pattern Syntax
19. Advanced Features
19.1. Unsafe Rust
19.2. Advanced Traits
19.3. Advanced Types
19.4. Advanced Functions and Closures
19.5. Macros
20. Final Project: Building a Multithreaded Web Server
20.1. Building a Single-Threaded Web Server
20.2. Turning Our Single-Threaded Server into a Multithreaded Server
20.3. Graceful Shutdown and Cleanup
21. Appendix
21.1. A - Keywords
21.2. B - Operators and Symbols
21.3. C - Derivable Traits
21.4. D - Useful Development Tools
21.5. E - Editions
21.6. F - Translations of the Book
21.7. G - How Rust is Made and “Nightly Rust”



The Rust Programming Language
 
Accepting Command Line Arguments
Let’s create a new project with, as always, cargo new. We’ll call our project minigrep to distinguish it from the grep tool that you might already have on your system.

$ cargo new minigrep
     Created binary (application) `minigrep` project
$ cd minigrep
The first task is to make minigrep accept its two command line arguments: the file path and a string to search for. That is, we want to be able to run our program with cargo run, two hyphens to indicate the following arguments are for our program rather than for cargo, a string to search for, and a path to a file to search in, like so:

$ cargo run -- searchstring example-filename.txt
Right now, the program generated by cargo new cannot process arguments we give it. Some existing libraries on crates.io can help with writing a program that accepts command line arguments, but because you’re just learning this concept, let’s implement this capability ourselves.

Reading the Argument Values
To enable minigrep to read the values of command line arguments we pass to it, we’ll need the std::env::args function provided in Rust’s standard library. This function returns an iterator of the command line arguments passed to minigrep. We’ll cover iterators fully in Chapter 13. For now, you only need to know two details about iterators: iterators produce a series of values, and we can call the collect method on an iterator to turn it into a collection, such as a vector, that contains all the elements the iterator produces.

The code in Listing 12-1 allows your minigrep program to read any command line arguments passed to it and then collect the values into a vector.

Filename: src/main.rs

use std::env;

fn main() {
    let args: Vec<String> = env::args().collect();
    dbg!(args);
}
Listing 12-1: Collecting the command line arguments into a vector and printing them

First, we bring the std::env module into scope with a use statement so we can use its args function. Notice that the std::env::args function is nested in two levels of modules. As we discussed in Chapter 7, in cases where the desired function is nested in more than one module, we’ve chosen to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from std::env. It’s also less ambiguous than adding use std::env::args and then calling the function with just args, because args might easily be mistaken for a function that’s defined in the current module.

The args Function and Invalid Unicode
Note that std::env::args will panic if any argument contains invalid Unicode. If your program needs to accept arguments containing invalid Unicode, use std::env::args_os instead. That function returns an iterator that produces OsString values instead of String values. We’ve chosen to use std::env::args here for simplicity, because OsString values differ per platform and are more complex to work with than String values.

On the first line of main, we call env::args, and we immediately use collect to turn the iterator into a vector containing all the values produced by the iterator. We can use the collect function to create many kinds of collections, so we explicitly annotate the type of args to specify that we want a vector of strings. Although we very rarely need to annotate types in Rust, collect is one function you do often need to annotate because Rust isn’t able to infer the kind of collection you want.

Finally, we print the vector using the debug macro. Let’s try running the code first with no arguments and then with two arguments:

$ cargo run
   Compiling minigrep v0.1.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0.61s
     Running `target/debug/minigrep`
[src/main.rs:5] args = [
    "target/debug/minigrep",
]
$ cargo run -- needle haystack
   Compiling minigrep v0.1.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 1.57s
     Running `target/debug/minigrep needle haystack`
[src/main.rs:5] args = [
    "target/debug/minigrep",
    "needle",
    "haystack",
]
Notice that the first value in the vector is "target/debug/minigrep", which is the name of our binary. This matches the behavior of the arguments list in C, letting programs use the name by which they were invoked in their execution. It’s often convenient to have access to the program name in case you want to print it in messages or change behavior of the program based on what command line alias was used to invoke the program. But for the purposes of this chapter, we’ll ignore it and save only the two arguments we need.

Saving the Argument Values in Variables
The program is currently able to access the values specified as command line arguments. Now we need to save the values of the two arguments in variables so we can use the values throughout the rest of the program. We do that in Listing 12-2.

Filename: src/main.rs

use std::env;

fn main() {
    let args: Vec<String> = env::args().collect();

    let query = &args[1];
    let file_path = &args[2];

    println!("Searching for {}", query);
    println!("In file {}", file_path);
}
Listing 12-2: Creating variables to hold the query argument and file path argument

As we saw when we printed the vector, the program’s name takes up the first value in the vector at args[0], so we’re starting arguments at index 1. The first argument minigrep takes is the string we’re searching for, so we put a reference to the first argument in the variable query. The second argument will be the file path, so we put a reference to the second argument in the variable file_path.

We temporarily print the values of these variables to prove that the code is working as we intend. Let’s run this program again with the arguments test and sample.txt:

$ cargo run -- test sample.txt
   Compiling minigrep v0.1.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0.0s
     Running `target/debug/minigrep test sample.txt`
Searching for test
In file sample.txt
Great, the program is working! The values of the arguments we need are being saved into the right variables. Later we’ll add some error handling to deal with certain potential erroneous situations, such as when the user provides no arguments; for now, we’ll ignore that situation and work on adding file-reading capabilities instead.

